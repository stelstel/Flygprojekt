Projekt 2. Java Advanced - FlightProject
https://drive.google.com/drive/my-drive
Java material | Project 2 | -FlightProject.pdf

//Seat	[Denna klass finns inte längre]						Stefan
	//seatClass = First or Economy [Titta på var customer sitter i Passangerplane, 0-5 first class, 6-10 economy class]
	//seatNumber = 1-10 
	//status = idle or Customer object [om indexet tomt, ingen customer]
	//price = 20000kr or 5000kr [se ovan First or economy]
	//assignCustomer() [putCustomer i PassengerPlane]
	//removeCustomer() [freeSeat i PassengerPlane]


BookingSystem						Kent
	has List of customers
	has company
	addCustomer()
Company							Stefan
	has List of Planes
	has Money
	buyPlane()
	sellPlane()
        getPlanes()

Money							Amirali
	saldo	
	income()
	cost()

PassengerPlane							Stefan
	has map of Seats (5 first class + 5 economy class)
	status = TAKEOFF, INFLIGHT, LANDING, REFUELLING, BOARDING, PASSANGERSLEAVING, INACTIVE
        putCustomer()   [works]
	fly()
	freeSeat()      [works]
	freeAllSeats()  [works]

Customer						Stefan
	name
	id
	has Ticket
	has FoodOrder
	getName()
	getSeat()
	getMenu()
	getFoodOrder()
	orderFood(int menuItem)
	payFood()

Ticket							Amirali
	Customer
	Plane
	Seat
	price
	expired

FoodOrder						Kent
	has Menu
	has List of FoodItems from Menu (orderd food)
	totalCost
	payed
	orderFood()
	getMenu()
	getTotalCost()
	pay()
	toString()

Menu							Kent
	has menu of FoodItems
	getMenu()
	getMenuItem(item)
	toString()

FoodItem						Kent
	item
	price
	getItem()
	getPrice()

UI							Kent
	Create a BookingSystem objekt (which has Customers and Company, Plane, Seats) 
Actions:
* Add Customer, name and seatClass	
* Show Menu
* Order Food
* Pay Food
* Show Customer
* Show all Customers
* Show planes
* Show seats
* Show Ticktes
:

===========================================================================================================================================
Proposal - Reserv seat


BookingSystem 
	creates a ticket object containing Customer object and seatClass
	Sends the ticket to the Company 
		customer.putCustomer(Ticket);

Company
	Selects the plane which is presently boarding
	Adds the Company to the ticket
	Sends the ticket to the Plane
		plane.putCustomer(Ticket);

Plane
	Selects an idle seat according to the SeatClass in the ticket.
	Adds the Plane object to the ticket
	Sends the ticket to the Seat		
		seat.putCustomer(Ticket);

Seat
	Mark the seat as occupied and saves reference to the Ticket object.
		(Ticket this.ticket = ticket)
	and return the ticket, all the way back to BookingSystem

When the ticket is received by the BookingSystem it contains all information, if the reservation succeeded.
If the reservation failed for some reason, then the ticket doesn't contain any Seat and is incomplete.
The BookingSystem can than try with a new Ticket with the other SeatClass or wait for a plane.

When the flight is over, all the seats in that plane are marked as idle,
	the tickets related to each seat marked as Expired, and ticket references removed from the seats.

The Ticket could contain:
	Customer customer;
	SeatClass seatClass
	Company company;
	Plane plane;
	Seat seat;
	boolean expired = false;

Constructor:
	public Ticket(Customer customer, SeatClass seatClass){


